{
    "atomType": "Molecule",
    "name": "HalfLapClient",
    "x": 0,
    "y": 0,
    "uniqueID": "b29f1187-190c-4ca3-bdb5-a9a6a48cf5ed",
    "ioValues": [],
    "description": "Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.",
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": "c16b1afb-1377-4c58-9bc2-4279413e330f",
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": "9b6be5de-e26b-4e35-89ba-1f5f615bd98b"
                }
            ],
            "description": "Connect geometry here to make it available in the next level up. "
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.18880208333333334,
            "y": 0.26785714285714285,
            "uniqueID": "7bb5a57a-9aaa-4552-8681-11e02a8c7c48",
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 50
                },
                {
                    "name": "y length",
                    "ioValue": 10
                }
            ],
            "description": "Creates a new rectangle."
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.30859375,
            "y": 0.22023809523809526,
            "uniqueID": "e9ebb480-689a-474c-9233-88fd28ec125e",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "7bb5a57a-9aaa-4552-8681-11e02a8c7c48"
                },
                {
                    "name": "height",
                    "ioValue": 10
                }
            ],
            "description": "Extrudes a 2D shape. Input can be negitive. "
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.1875,
            "y": 0.5982142857142857,
            "uniqueID": "a06e4474-4809-402f-833d-f26f0e145a66",
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 10
                },
                {
                    "name": "y length",
                    "ioValue": 50
                }
            ],
            "description": "Creates a new rectangle."
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.2890625,
            "y": 0.550595238095238,
            "uniqueID": "79829f80-f95f-48ed-908e-634ffdb28399",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "a06e4474-4809-402f-833d-f26f0e145a66"
                },
                {
                    "name": "height",
                    "ioValue": 10
                }
            ],
            "description": "Extrudes a 2D shape. Input can be negitive. "
        },
        {
            "atomType": "CutLayout",
            "name": "Cut Layout",
            "x": 0.6634114583333334,
            "y": 0.46726190476190477,
            "uniqueID": "65106b27-5557-4b2c-9c13-8d8196e770f8",
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": "9b6be5de-e26b-4e35-89ba-1f5f615bd98b"
                },
                {
                    "name": "Sheet Width",
                    "ioValue": 1219
                },
                {
                    "name": "Sheet Height",
                    "ioValue": 2438
                },
                {
                    "name": "Part Padding",
                    "ioValue": 6
                }
            ],
            "description": "Extracts all parts tagged for cutting and lays them out on a sheet to cut.",
            "placements": [
                [
                    {
                        "id": 0,
                        "rotate": 270,
                        "translate": {
                            "x": 3.327538341378398,
                            "y": 28.100000000000005
                        }
                    },
                    {
                        "id": 1,
                        "rotate": 180,
                        "translate": {
                            "x": 24.527538501008863,
                            "y": 28.0999999566434
                        }
                    }
                ]
            ]
        },
        {
            "atomType": "GitHubMolecule",
            "name": "HalfLap",
            "x": 0.53515625,
            "y": 0.4642857142857143,
            "uniqueID": "9b6be5de-e26b-4e35-89ba-1f5f615bd98b",
            "ioValues": [
                {
                    "name": "Assembly1",
                    "ioValue": "e9ebb480-689a-474c-9233-88fd28ec125e"
                },
                {
                    "name": "Assembly2",
                    "ioValue": "79829f80-f95f-48ed-908e-634ffdb28399"
                }
            ],
            "description": "Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.",
            "topLevel": false,
            "allAtoms": [
                {
                    "atomType": "Output",
                    "name": "Output",
                    "x": 0.98,
                    "y": 0.5,
                    "uniqueID": "be6b14cb-e03a-4eec-93c1-8f634e44fece",
                    "ioValues": [
                        {
                            "name": "number or geometry",
                            "ioValue": "9dcfa458-90d2-4e72-89f9-f9cb99fa74a3"
                        }
                    ],
                    "description": "Connect geometry here to make it available in the next level up. "
                },
                {
                    "atomType": "Code",
                    "name": "Code",
                    "x": 0.6158854166666666,
                    "y": 0.23214285714285715,
                    "uniqueID": "9dcfa458-90d2-4e72-89f9-f9cb99fa74a3",
                    "ioValues": [
                        {
                            "name": "shape1",
                            "ioValue": "e9ebb480-689a-474c-9233-88fd28ec125e"
                        },
                        {
                            "name": "shape2",
                            "ioValue": "79829f80-f95f-48ed-908e-634ffdb28399"
                        }
                    ],
                    "description": "Defines a Replicad code block.",
                    "codeVersion": 1,
                    "code": " \n      //Inputs:[shape1, shape2]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n\n      // Move intersector to the point of interest instead of always being at 0,0\n      // handle assembly inputs\n      // how to handle intersection shapes not aligned to z axis?\n          // this will break our cube cut logic\n      // better logic for selecting axis of sharing\nfunction rectFromBounds(bounds) {\n  console.log(\"make rect\")\n  console.log(bounds);\n  \n  let baseRectangle = replicad.drawRectangle(Math.abs(bounds[0][0] - bounds[1][0]), Math.abs(bounds[0][1] - bounds[1][1]))\n  const yPlane = new replicad.Plane().pivot(0, 'Y');\n  //And we extrude the shape to make it 3D\n  let createdShape = baseRectangle.sketchOnPlane(yPlane).extrude(Math.abs(bounds[0][2] - bounds[1][2]))\n  const transform = [\n    (bounds[0][0] + bounds[1][0]) / 2.0,\n    (bounds[0][1] + bounds[1][1]) / 2.0,\n    bounds[0][2]\n    ];\n  console.log(transform)\n  createdShape = createdShape.translate(transform)\n  let cube = {\n      geometry: [createdShape], \n      tags: [],\n      color: '#A3CE5B',\n      plane: yPlane,\n      bom: []\n  }\n\n  \n  return cube\n}\n\nasync function performHalfLap(shape1, shape2) {\n\n  //Takes the address and gets the shape from the library\n\n  let intersect = await Intersect(shape1, shape2)\n  // get z bounds\n  console.log(\"foo\")\n  console.log(intersect)\n  console.log(intersect.geometry[0].boundingBox)\n  let boundingBox = intersect.geometry[0].boundingBox\n  let newBounds = undefined;\n  try {\n    newBounds = boundingBox.bounds;\n  } catch (error) {\n    // there' isn't an intersecting volume\n    console.log(\"no intersection. returning shape1 unmodified\")\n    return shape1\n  }\n\n  console.log(\" bounds \")\n  console.log(newBounds)\n\n  newBounds[1][2] = (newBounds[0][2] + newBounds[1][2]) / 2.0;\n  let halfIntersect = rectFromBounds(newBounds)\n  console.log(halfIntersect)\n\n  // create cube to reduce to half of the intersection\n  // do the cutting\n // let remover = intersect.geometry[0].cut(halfIntersect.geometry[0])\n\n  // merge the half-intersection with one of our inputs (either?)\n  let newShape1 = {\n    geometry: [shape1.geometry[0].clone().cut(halfIntersect.geometry[0])],\n    tags: shape1.tags || [],\n    color: shape1.color,\n    plane: shape1.plane,\n    bom: shape1.bom || []\n  };\n  console.log(\"result for leaf: \")\n  console.log(newShape1)\n\n  return newShape1;\n//  return await Assembly([shape2, newShape1])//, cube]);\n}\n\n// choose midpoint\n         console.log(\"starting... \");\n         console.log(shape1)\n         console.log(shape2)\n         if (library[shape1] == undefined) {\n           throw new Error(\"Shape1 \" + shape1 + \" not a geometry id\")\n         }\n         if (library[shape2] == undefined) {\n           throw new Error(\"Shape2 \" + shape2 + \" not a geometry id\")\n         }\n\n         // TODO: someday we should pass the geoms directly, user should never have to deal with\n         // library lookups imo\n         shape1 = library[shape1]\n         shape2 = library[shape2]\n         \n\n         s2AsList = await AssemblyAsIterable(shape2);\n         console.log(\"s2AsList: \")\n         console.log(s2AsList);\n         let updatedShape1 = await AssemblyMap(shape1, async (s1leaf, _) => {\n          // let individualIntersects = AssemblyMap(shape2, (s2leaf, _) => {\n           //  return performHalfLap(s1leaf, s2leaf)\n           //})\n          // return individualIntersects;\n            for (const el of s2AsList) {\n              s1leaf = await performHalfLap(s1leaf, el)\n            }\n            return s1leaf\n          })\n         console.log(\"done\");\n         console.log(updatedShape1)\n         const newShape2 = CutAssembly(shape2, [updatedShape1])\n         return Assembly([updatedShape1, newShape2])\n\n      \n\n      \n\n//      return Intersect(shape1, shape2)\n\n\n\n      //This makes a new copy of of the shape (to prevent garbage collection issues),\n      //and moves it in the X direction. Note that this will not work if the input is an assembly\n      /*let movedShape = importedShape.geometry[0].clone().translate([dist,0,0])\n      \n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Shape:\")\n      console.log(importedShape);\n      \n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [movedShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n      \n      //We could at this point return shape1 as a complete shape and it will be automatically written to the library for us\n      //return shape1\n      \n      //We can also create a new shape from scratch\n      let createdRectangle = replicad.drawRectangle(5,7)\n      //This is the plane we are going to put our new shape on\n      const newPlane = new Plane().pivot(0, 'Y');\n      //And we extrude the shape to make it 3D\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n      \n      //For our new geometry we need to define the tags, color, plane, etc\n      let shape2 = {\n          geometry: [createdShape], \n          tags: [\"aTag\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n      \n      //Then we can return our created shape in just the same way\n      //return shape2\n      \n      //If we want to return both shapes at once, we can create an assembly with them\n      let anAssembly = {\n        geometry: [shape1, shape2], \n        tags: [\"aNewTag\"],\n        color: '#A3CF5B',\n        plane: newPlane,\n        bom: []\n      }\n      \n      //And we can return that in the same way\n      return anAssembly\n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
                },
                {
                    "atomType": "Input",
                    "name": "Assembly1",
                    "x": 0.025384615384615384,
                    "y": 0.375,
                    "uniqueID": "c2f75341-fd87-4feb-b78d-f5f770335a63",
                    "ioValues": [],
                    "description": "Adds an input to the parent molecule. If the parent molecule is the top level of the project then the input will be available when the project is shared or imported into another project. Name is editable",
                    "type": "geometry"
                },
                {
                    "atomType": "Input",
                    "name": "Assembly2",
                    "x": 0.025384615384615384,
                    "y": 0.6279761904761905,
                    "uniqueID": "3d081908-f762-45cc-b33d-d0f776214267",
                    "ioValues": [],
                    "description": "Adds an input to the parent molecule. If the parent molecule is the top level of the project then the input will be available when the project is shared or imported into another project. Name is editable",
                    "type": "geometry"
                }
            ],
            "allConnectors": [
                {
                    "ap1Name": "geometry",
                    "ap2Name": "number or geometry",
                    "ap2Primary": false,
                    "ap1ID": "9dcfa458-90d2-4e72-89f9-f9cb99fa74a3",
                    "ap2ID": "be6b14cb-e03a-4eec-93c1-8f634e44fece"
                },
                {
                    "ap1Name": "number or geometry",
                    "ap2Name": "shape1",
                    "ap2Primary": false,
                    "ap1ID": "c2f75341-fd87-4feb-b78d-f5f770335a63",
                    "ap2ID": "9dcfa458-90d2-4e72-89f9-f9cb99fa74a3"
                },
                {
                    "ap1Name": "number or geometry",
                    "ap2Name": "shape2",
                    "ap2Primary": false,
                    "ap1ID": "3d081908-f762-45cc-b33d-d0f776214267",
                    "ap2ID": "9dcfa458-90d2-4e72-89f9-f9cb99fa74a3"
                }
            ],
            "parentRepo": {
                "privateRepo": false,
                "repoName": "HalfLap",
                "dateCreated": "2025-05-30T17:34:24Z",
                "readMe": "https://raw.githubusercontent.com/tristan-huber/HalfLap/master/README.md?sanitize=true",
                "yyyy": 2025,
                "topMoleculeID": 1748626464674,
                "githubMoleculesUsed": [],
                "html_url": "https://github.com/tristan-huber/HalfLap",
                "topics": [
                    "abundance-tool"
                ],
                "parentRepo": null,
                "forks": 0,
                "dateModified": "739422",
                "ranking": 0,
                "searchField": "halflap tristan-huber molecule to fix intersections into a half-lap joint style abundance-tool",
                "owner": "tristan-huber",
                "description": "Molecule to fix intersections into a half-lap joint style",
                "contentURL": "https://raw.githubusercontent.com/tristan-huber/HalfLap/master/project.abundance?sanitize=true",
                "svgURL": "https://raw.githubusercontent.com/tristan-huber/HalfLap/master/project.svg?sanitize=true"
            },
            "unitsKey": "MM",
            "fileTypeVersion": 1,
            "compiledBom": []
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": "7bb5a57a-9aaa-4552-8681-11e02a8c7c48",
            "ap2ID": "e9ebb480-689a-474c-9233-88fd28ec125e"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "Assembly1",
            "ap2Primary": false,
            "ap1ID": "e9ebb480-689a-474c-9233-88fd28ec125e",
            "ap2ID": "9b6be5de-e26b-4e35-89ba-1f5f615bd98b"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap2Primary": true,
            "ap1ID": "a06e4474-4809-402f-833d-f26f0e145a66",
            "ap2ID": "79829f80-f95f-48ed-908e-634ffdb28399"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "Assembly2",
            "ap2Primary": false,
            "ap1ID": "79829f80-f95f-48ed-908e-634ffdb28399",
            "ap2ID": "9b6be5de-e26b-4e35-89ba-1f5f615bd98b"
        },
        {
            "ap1Name": "Geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": "9b6be5de-e26b-4e35-89ba-1f5f615bd98b",
            "ap2ID": "c16b1afb-1377-4c58-9bc2-4279413e330f"
        },
        {
            "ap1Name": "Geometry",
            "ap2Name": "geometry",
            "ap2Primary": false,
            "ap1ID": "9b6be5de-e26b-4e35-89ba-1f5f615bd98b",
            "ap2ID": "65106b27-5557-4b2c-9c13-8d8196e770f8"
        }
    ],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": {},
    "filetypeVersion": 1
}